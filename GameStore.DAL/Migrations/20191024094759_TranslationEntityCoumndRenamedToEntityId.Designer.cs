// <auto-generated />
using System;
using GameStore.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.DAL.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20191024094759_TranslationEntityCoumndRenamedToEntityId")]
    partial class TranslationEntityCoumndRenamedToEntityId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GameTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GameTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GenreTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GenreTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fd6d1ba-5568-4383-8e62-f3e49021f34e"),
                            Code = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("300c7307-8bf2-434f-8f99-f32100d8e166"),
                            Code = "ru",
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PlatformTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PlatformTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PublisherTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityId");

                    b.Property<string>("HomePage");

                    b.Property<Guid>("LanguageId");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PublisherTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("676c17d3-b1ac-44a3-a184-d682b075570e"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("b551938c-d9d9-4dff-b3a5-d5967a004094"),
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("63375e2d-27a8-436e-b068-57e6882e1b90"),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("771d19d5-4a24-4652-b39f-6eab1c7d86ae"),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.CommentModels.Comment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Body");

                    b.Property<Guid?>("GameId");

                    b.Property<Guid>("GameStateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentCommentId");

                    b.Property<string>("Quote");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameStateId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.Game", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Discontinued");

                    b.Property<Guid?>("GameStateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<DateTime>("PublishDate");

                    b.Property<Guid?>("PublisherId");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameGenre", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("GenreId");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("PlatformTypeId");

                    b.HasKey("GameId", "PlatformTypeId");

                    b.HasIndex("PlatformTypeId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GameKey");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("GameState");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Genre", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentGenreId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4e18047-c7d7-4640-9200-8d0971748732"),
                            IsDeleted = false,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("8b640c20-3561-4e89-9719-53144bb64732"),
                            IsDeleted = false,
                            Name = "RTS",
                            ParentGenreId = new Guid("c4e18047-c7d7-4640-9200-8d0971748732")
                        },
                        new
                        {
                            Id = new Guid("c0257173-9ab9-4c7f-8ada-d4be4008982a"),
                            IsDeleted = false,
                            Name = "TBS",
                            ParentGenreId = new Guid("c4e18047-c7d7-4640-9200-8d0971748732")
                        },
                        new
                        {
                            Id = new Guid("2c10ff0a-c4e2-4a3f-8007-8dd1f70e5e35"),
                            IsDeleted = false,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("88444a16-eeb6-4ecf-95a1-b34ee1711811"),
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("f596caa2-092b-470a-901c-8fd87fda42a8"),
                            IsDeleted = false,
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("50684a40-5ad3-4422-8ce5-481a8ee94fb6"),
                            IsDeleted = false,
                            Name = "Rally",
                            ParentGenreId = new Guid("f596caa2-092b-470a-901c-8fd87fda42a8")
                        },
                        new
                        {
                            Id = new Guid("5bb7c881-b24f-4032-8879-0aea65cec9b6"),
                            IsDeleted = false,
                            Name = "Arcade",
                            ParentGenreId = new Guid("f596caa2-092b-470a-901c-8fd87fda42a8")
                        },
                        new
                        {
                            Id = new Guid("799708b3-0b39-4881-abd2-9956d42e1f3d"),
                            IsDeleted = false,
                            Name = "Formula",
                            ParentGenreId = new Guid("f596caa2-092b-470a-901c-8fd87fda42a8")
                        },
                        new
                        {
                            Id = new Guid("5f304498-3b45-44ce-9c9d-80e4a5d2f9c3"),
                            IsDeleted = false,
                            Name = "Off-road",
                            ParentGenreId = new Guid("f596caa2-092b-470a-901c-8fd87fda42a8")
                        },
                        new
                        {
                            Id = new Guid("630e04f5-94e9-4b0a-b544-59cb4a20ce5c"),
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("73ba3fd4-f979-4dee-9c1b-21a4c63643aa"),
                            IsDeleted = false,
                            Name = "FPS",
                            ParentGenreId = new Guid("630e04f5-94e9-4b0a-b544-59cb4a20ce5c")
                        },
                        new
                        {
                            Id = new Guid("62582101-3eb5-4642-b152-6171da5a508e"),
                            IsDeleted = false,
                            Name = "TPS",
                            ParentGenreId = new Guid("630e04f5-94e9-4b0a-b544-59cb4a20ce5c")
                        },
                        new
                        {
                            Id = new Guid("778906ce-28f0-43a5-83c4-284f74f956ad"),
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("fbed2732-51f1-49d1-a75d-9d50517bc1d5"),
                            IsDeleted = false,
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1405050505"),
                            IsDeleted = false,
                            Name = "Condiments"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1505050505"),
                            IsDeleted = false,
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1605050505"),
                            IsDeleted = false,
                            Name = "Confections"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1705050505"),
                            IsDeleted = false,
                            Name = "Grains/Cereals"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1805050505"),
                            IsDeleted = false,
                            Name = "Dairy Products"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1905050505"),
                            IsDeleted = false,
                            Name = "Meat/Poultry"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1a05050505"),
                            IsDeleted = false,
                            Name = "Produce"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1b05050505"),
                            IsDeleted = false,
                            Name = "Seafood"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.Order", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderStatus");

                    b.Property<DateTime?>("ShippedDate");

                    b.Property<string>("Shipper");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.OrderDetail", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<float>("Discount")
                        .HasColumnType("Real");

                    b.Property<string>("GameKey")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Platform", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fd90271-8665-4444-a4bc-6780a75c4f65"),
                            IsDeleted = false,
                            Name = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("3e90816c-3b74-4741-8bfb-911c99db5957"),
                            IsDeleted = false,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("aa6d1f59-ff28-42a9-baa5-8f474f168d47"),
                            IsDeleted = false,
                            Name = "IOS"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Publisher", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .HasColumnType("Ntext");

                    b.Property<string>("HomePage")
                        .HasColumnType("Ntext");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GameTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("Languages")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GenreTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "Genre")
                        .WithMany("Languages")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PlatformTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Platform", "Platform")
                        .WithMany("Languages")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PublisherTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Publisher", "Publisher")
                        .WithMany("Languages")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.UserRole", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.AccountModels.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.AccountModels.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.CommentModels.Comment", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.GameState")
                        .WithMany("Comments")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.CommentModels.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.Game", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.GameState", "GameState")
                        .WithMany()
                        .HasForeignKey("GameStateId");

                    b.HasOne("GameStore.Domain.Models.SqlModels.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.Platform", "PlatformType")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.OrderDetail", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.OrderModels.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
