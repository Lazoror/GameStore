// <auto-generated />
using System;
using GameStore.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.DAL.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20191021095440_SeedGenres")]
    partial class SeedGenres
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GameTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GameTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GenreTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GenreTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = new Guid("340435df-1b6d-42da-b73e-8eea55c4a8b2"),
                            Code = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("55cb44d9-b9fa-49f4-90d9-5c3a20013ac2"),
                            Code = "ru",
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PlatformTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PlatformTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PublisherTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<string>("HomePage");

                    b.Property<Guid>("LanguageId");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PublisherTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.CommentModels.Comment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Body");

                    b.Property<Guid?>("GameId");

                    b.Property<Guid>("GameStateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentCommentId");

                    b.Property<string>("Quote");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameStateId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.Game", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Discontinued");

                    b.Property<Guid?>("GameStateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<DateTime>("PublishDate");

                    b.Property<Guid?>("PublisherId");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameGenre", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("GenreId");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("PlatformTypeId");

                    b.HasKey("GameId", "PlatformTypeId");

                    b.HasIndex("PlatformTypeId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GameKey");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("GameState");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Genre", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentGenreId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("671fbbf8-4f4e-46fb-bc5b-0a20beeaf223"),
                            IsDeleted = false,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("f6f910cc-ed06-4e90-a72e-2f362ed77514"),
                            IsDeleted = false,
                            Name = "RTS",
                            ParentGenreId = new Guid("671fbbf8-4f4e-46fb-bc5b-0a20beeaf223")
                        },
                        new
                        {
                            Id = new Guid("1201df43-8e8d-47b5-8044-52536449e9f1"),
                            IsDeleted = false,
                            Name = "TBS",
                            ParentGenreId = new Guid("671fbbf8-4f4e-46fb-bc5b-0a20beeaf223")
                        },
                        new
                        {
                            Id = new Guid("747bb2ac-e5e9-42e5-ac80-b04d474c8f79"),
                            IsDeleted = false,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("98b37907-d6db-406d-bf6e-4783f64da9a9"),
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("c0304b57-20be-4dc5-b406-156458d3c92b"),
                            IsDeleted = false,
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("1d1cfc25-9df3-4397-9ffe-5adf74446bb4"),
                            IsDeleted = false,
                            Name = "Rally",
                            ParentGenreId = new Guid("c0304b57-20be-4dc5-b406-156458d3c92b")
                        },
                        new
                        {
                            Id = new Guid("ead19086-69d4-440b-bab1-ac64e0bb43dc"),
                            IsDeleted = false,
                            Name = "Arcade",
                            ParentGenreId = new Guid("c0304b57-20be-4dc5-b406-156458d3c92b")
                        },
                        new
                        {
                            Id = new Guid("bd255c44-c46d-4ef3-bde8-079050e4dd79"),
                            IsDeleted = false,
                            Name = "Formula",
                            ParentGenreId = new Guid("c0304b57-20be-4dc5-b406-156458d3c92b")
                        },
                        new
                        {
                            Id = new Guid("195cd41a-ba44-447a-a650-9557afecd707"),
                            IsDeleted = false,
                            Name = "Off-road",
                            ParentGenreId = new Guid("c0304b57-20be-4dc5-b406-156458d3c92b")
                        },
                        new
                        {
                            Id = new Guid("e103084d-937f-4637-bd86-3a0423fd06b7"),
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("0e7904af-98c5-4d99-8f46-7def293f3139"),
                            IsDeleted = false,
                            Name = "FPS",
                            ParentGenreId = new Guid("e103084d-937f-4637-bd86-3a0423fd06b7")
                        },
                        new
                        {
                            Id = new Guid("f7f2093d-46fb-4a87-9645-3cccf031db3b"),
                            IsDeleted = false,
                            Name = "TPS",
                            ParentGenreId = new Guid("e103084d-937f-4637-bd86-3a0423fd06b7")
                        },
                        new
                        {
                            Id = new Guid("9c60bc78-c242-4f86-8d0c-7239b58e8dd0"),
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("2afc49ef-f084-45bb-8770-9e18fc6fc4ef"),
                            IsDeleted = false,
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1405050505"),
                            IsDeleted = false,
                            Name = "Condiments"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1505050505"),
                            IsDeleted = false,
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1605050505"),
                            IsDeleted = false,
                            Name = "Confections"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1705050505"),
                            IsDeleted = false,
                            Name = "Grains/Cereals"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1805050505"),
                            IsDeleted = false,
                            Name = "Dairy Products"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1905050505"),
                            IsDeleted = false,
                            Name = "Meat/Poultry"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1a05050505"),
                            IsDeleted = false,
                            Name = "Produce"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1b05050505"),
                            IsDeleted = false,
                            Name = "Seafood"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.Order", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderStatus");

                    b.Property<DateTime?>("ShippedDate");

                    b.Property<string>("Shipper");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.OrderDetail", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<float>("Discount")
                        .HasColumnType("Real");

                    b.Property<string>("GameKey")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Platform", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Publisher", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .HasColumnType("Ntext");

                    b.Property<string>("HomePage")
                        .HasColumnType("Ntext");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GameTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GenreTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "Genre")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PlatformTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Platform", "Platform")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PublisherTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Publisher", "Publisher")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.UserRole", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.AccountModels.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.AccountModels.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.CommentModels.Comment", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.GameState")
                        .WithMany("Comments")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.CommentModels.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.Game", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.GameState", "GameState")
                        .WithMany()
                        .HasForeignKey("GameStateId");

                    b.HasOne("GameStore.Domain.Models.SqlModels.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.Platform", "PlatformType")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.OrderDetail", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.OrderModels.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
