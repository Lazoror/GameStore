// <auto-generated />
using System;
using GameStore.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.DAL.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20191021100621_SeedRolesAndPlatforms")]
    partial class SeedRolesAndPlatforms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GameTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GameTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GenreTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GenreTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a4909e4-a7fd-4fe9-a027-f0bb4542de6c"),
                            Code = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("a7d10b70-3c5a-44bd-bb44-1a01ac0e5dca"),
                            Code = "ru",
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PlatformTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PlatformTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PublisherTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityTranslationId");

                    b.Property<string>("HomePage");

                    b.Property<Guid>("LanguageId");

                    b.HasKey("Id");

                    b.HasIndex("EntityTranslationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PublisherTranslation");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afef83be-aa97-4e59-bcc2-3185a522e8e1"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("e23fab55-c2f7-47cd-8d95-834426442f09"),
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("09694660-a54e-4075-b340-231c11bfbab5"),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("0f8b7be1-532e-4f7a-93fd-30c38998e416"),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.CommentModels.Comment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Body");

                    b.Property<Guid?>("GameId");

                    b.Property<Guid>("GameStateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentCommentId");

                    b.Property<string>("Quote");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameStateId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.Game", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Discontinued");

                    b.Property<Guid?>("GameStateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<DateTime>("PublishDate");

                    b.Property<Guid?>("PublisherId");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameGenre", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("GenreId");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("PlatformTypeId");

                    b.HasKey("GameId", "PlatformTypeId");

                    b.HasIndex("PlatformTypeId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GameKey");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("GameState");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Genre", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentGenreId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98e34ed6-4e0d-4672-b6dc-a520523d217d"),
                            IsDeleted = false,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("e28b9c16-033b-4ba0-bbf4-f41c3e796822"),
                            IsDeleted = false,
                            Name = "RTS",
                            ParentGenreId = new Guid("98e34ed6-4e0d-4672-b6dc-a520523d217d")
                        },
                        new
                        {
                            Id = new Guid("ac310abf-b580-4cb6-a823-5c413208f1b6"),
                            IsDeleted = false,
                            Name = "TBS",
                            ParentGenreId = new Guid("98e34ed6-4e0d-4672-b6dc-a520523d217d")
                        },
                        new
                        {
                            Id = new Guid("27c420d9-5498-4dd5-8383-7ad85ec969d4"),
                            IsDeleted = false,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("1bde550f-2a67-4ce4-89e7-4b26a39ce15b"),
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("20bd0c9c-bf3e-430b-a51b-6d0990cbeae1"),
                            IsDeleted = false,
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("47c65fd0-0195-4467-9ba9-ba24238d0a5b"),
                            IsDeleted = false,
                            Name = "Rally",
                            ParentGenreId = new Guid("20bd0c9c-bf3e-430b-a51b-6d0990cbeae1")
                        },
                        new
                        {
                            Id = new Guid("4bd1b457-02fe-4aa7-bca9-6c6bb450ec07"),
                            IsDeleted = false,
                            Name = "Arcade",
                            ParentGenreId = new Guid("20bd0c9c-bf3e-430b-a51b-6d0990cbeae1")
                        },
                        new
                        {
                            Id = new Guid("e98bbacf-b65d-4fbb-bc0f-081b02aa5f60"),
                            IsDeleted = false,
                            Name = "Formula",
                            ParentGenreId = new Guid("20bd0c9c-bf3e-430b-a51b-6d0990cbeae1")
                        },
                        new
                        {
                            Id = new Guid("57b1a1fc-6ac1-4350-9a2f-d728509819f7"),
                            IsDeleted = false,
                            Name = "Off-road",
                            ParentGenreId = new Guid("20bd0c9c-bf3e-430b-a51b-6d0990cbeae1")
                        },
                        new
                        {
                            Id = new Guid("fa5e667c-1aa9-437a-b930-2071a6f032b3"),
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("43ec0a0c-d260-4283-9d9d-c99e6665a160"),
                            IsDeleted = false,
                            Name = "FPS",
                            ParentGenreId = new Guid("fa5e667c-1aa9-437a-b930-2071a6f032b3")
                        },
                        new
                        {
                            Id = new Guid("22ce4723-5532-4361-9563-94dbaec986df"),
                            IsDeleted = false,
                            Name = "TPS",
                            ParentGenreId = new Guid("fa5e667c-1aa9-437a-b930-2071a6f032b3")
                        },
                        new
                        {
                            Id = new Guid("c3ffa9b6-5a78-4210-be74-fe111d8addb2"),
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("2ba1898d-9807-4509-8bac-c10f1763db75"),
                            IsDeleted = false,
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1405050505"),
                            IsDeleted = false,
                            Name = "Condiments"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1505050505"),
                            IsDeleted = false,
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1605050505"),
                            IsDeleted = false,
                            Name = "Confections"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1705050505"),
                            IsDeleted = false,
                            Name = "Grains/Cereals"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1805050505"),
                            IsDeleted = false,
                            Name = "Dairy Products"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1905050505"),
                            IsDeleted = false,
                            Name = "Meat/Poultry"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1a05050505"),
                            IsDeleted = false,
                            Name = "Produce"
                        },
                        new
                        {
                            Id = new Guid("a40b825d-351e-f2fc-715c-0e1b05050505"),
                            IsDeleted = false,
                            Name = "Seafood"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.Order", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderStatus");

                    b.Property<DateTime?>("ShippedDate");

                    b.Property<string>("Shipper");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.OrderDetail", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<float>("Discount")
                        .HasColumnType("Real");

                    b.Property<string>("GameKey")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Platform", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89a6045f-5454-4ea6-8dec-178cf0ba6921"),
                            IsDeleted = false,
                            Name = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("bd17cf37-c80e-4f59-a972-7a7e93865186"),
                            IsDeleted = false,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("ef5460cc-fd2b-4561-89ea-5c2f925bd1f6"),
                            IsDeleted = false,
                            Name = "IOS"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Publisher", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .HasColumnType("Ntext");

                    b.Property<string>("HomePage")
                        .HasColumnType("Ntext");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GameTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.GenreTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "Genre")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PlatformTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Platform", "Platform")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.LanguageModels.PublisherTranslation", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Publisher", "Publisher")
                        .WithMany("Languages")
                        .HasForeignKey("EntityTranslationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.LanguageModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.AccountModels.UserRole", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.AccountModels.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.AccountModels.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.CommentModels.Comment", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.GameState")
                        .WithMany("Comments")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.CommentModels.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.Game", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.GameState", "GameState")
                        .WithMany()
                        .HasForeignKey("GameStateId");

                    b.HasOne("GameStore.Domain.Models.SqlModels.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.GameModels.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.GameModels.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Domain.Models.SqlModels.Platform", "PlatformType")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.Genre", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");
                });

            modelBuilder.Entity("GameStore.Domain.Models.SqlModels.OrderModels.OrderDetail", b =>
                {
                    b.HasOne("GameStore.Domain.Models.SqlModels.OrderModels.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
